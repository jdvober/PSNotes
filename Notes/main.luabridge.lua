local ran_ok,err=pcall(function()local ran_ok,kpse=pcall(require, "kpse")if ran_ok then kpse.set_program_name("luatex")end assert(load("local lfs=require(\"lfs\")local options={eagerCache = true, experimental = false, singletonCache = true, unicodeNormalization = true, unicodeNormalizationForm = \"nfc\", cacheDir = \"./_markdown_main\", contentBlocksLanguageMap = \"markdown-languages.json\", debugExtensionsFileName = \"./main.debug-extensions.json\", frozenCacheFileName = \"./_markdown_main/frozenCache.tex\", autoIdentifiers = false, blankBeforeBlockquote = false, blankBeforeCodeFence = false, blankBeforeDivFence = false, blankBeforeHeading = false, blankBeforeList = false, bracketedSpans = false, breakableBlockquotes = true, citationNbsps = true, citations = false, codeSpans = true, contentBlocks = false, contentLevel = \"block\", debugExtensions = false, definitionLists = false, ensureJekyllData = false, expectJekyllData = false, extensions = {}, fancyLists = false, fencedCode = true, fencedCodeAttributes = false, fencedDivs = false, finalizeCache = false, frozenCacheCounter = 0, gfmAutoIdentifiers = false, hashEnumerators = false, headerAttributes = false, html = true, hybrid = false, inlineCodeAttributes = false, inlineNotes = false, jekyllData = false, linkAttributes = false, lineBlocks = false, mark = false, notes = false, pipeTables = false, preserveTabs = true, rawAttribute = false, relativeReferences = false, shiftHeadings = 0, slice = \"^ $\", smartEllipses = false, startNumber = true, strikeThrough = false, stripIndent = false, subscripts = false, superscripts = false, tableAttributes = false, tableCaptions = false, taskLists = false, texComments = false, texMathDollars = false, texMathDoubleBackslash = false, texMathSingleBackslash = false, tightLists = true, underscores = true, }if not lfs.isdir(options.cacheDir)then assert(lfs.mkdir(options.cacheDir))end local md=require(\"markdown\")local convert=md.new(options)local filename=\"./main.markdown.in\"local file=assert(io.open(filename,\"r\"),[[Could not open file \"]]..filename..[[\" for reading]])local input=assert(file:read(\"*a\"))assert(file:close())print(convert(input))if options.cacheDir then lfs.rmdir(options.cacheDir) end "))()end)if not ran_ok then local file=io.open("./main.luabridge.err","w")if file then file:write(err.."\n")file:close()end print('\\begingroup\\ExplSyntaxOn\\csname msg_error:nnvv\\endcsname{luabridge}{failed-to-execute}{g_luabridge_output_dirname_str}{g_luabridge_error_output_filename_str}\\endgroup')end
